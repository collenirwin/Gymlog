#pragma checksum "C:\Users\epere\OneDrive\Gymlog\Gymlog\Views\Home\Timer.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "36220d99f8ab358cbf577b43bb4fb576f15dc98f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Timer), @"mvc.1.0.view", @"/Views/Home/Timer.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Timer.cshtml", typeof(AspNetCore.Views_Home_Timer))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\epere\OneDrive\Gymlog\Gymlog\Views\_ViewImports.cshtml"
using Gymlog;

#line default
#line hidden
#line 2 "C:\Users\epere\OneDrive\Gymlog\Gymlog\Views\_ViewImports.cshtml"
using Gymlog.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"36220d99f8ab358cbf577b43bb4fb576f15dc98f", @"/Views/Home/Timer.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"221afc43e64317c4f1fa0904c7b9307c191dcbcb", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Timer : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(121, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(130, 19911, true);
            WriteLiteral(@"<style>

    .text {
        font-size: 25px;
        font-family: 'Roboto Condensed', serif;
        margin-top: 10px;
        margin-bottom: 10px;
        text-align: center;
    }

    .digit {
        font-size: 130px;
        font-weight: 100;
        font-family: 'Roboto', serif;
        /*margin: 10px;*/
        text-align: center;
    }

    .block > p {
        display: inline;
        text-align: center;
    }

    .block {
        margin-left: 27%;
    }

    .form {
        margin-left: 31%;
    }

    .stopwatch {
        margin-left: 11%;
    }

    h3 {
        text-align: center;
    }
</style>

<script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.21/vue.js""></script>
<div id=""app"">
    <button type=""button"" v-on:click=""show_component = !show_component"">Timer/Stopwatch</button>

    <Countdown v-if=""show_component""></Countdown>

    <Stopwatch v-if=""!show_component""></Stopwatch>

</div>



<script>

    Vue.component('Countdown', {
");
            WriteLiteral(@"        template: '<div> \
       <h3>Timer</h3>\
    <div class=""timer block"">     \
        <p class=""digit"">{{ hours }}</p>\
        <p class=""text"">Hours</p>\
        <p class=""digit"">{{ minutes }}</p>\
        <p class=""text"">Minutes</p>\
        <p class=""digit"">{{ seconds }}</p>\
        <p class=""text"">Seconds</p>\
    </div>\
    <div class=""form"">\
    <input type=""text"" name=""timer"" v-model=""timer"" placeholder=""00:30:00"" />\
    <button type=""button"" v-on:click=""begin"">{{button_text}}</button>\
    <button type=""button"" v-on:click=""reset"">Reset</button>\
        </div>\
</div>',
        data() {
            return {
                timer: ""00:00:00"",
                min: 0,
                sec: 0,
                hr: 0,
                now: new Date().getTime() / 1000,
                start: 0,
                reset_bool: 0,
                paused_time: 0,
                interval: 0,
                date: 0,
                diff: 0,
                _current_: 0,
     ");
            WriteLiteral(@"           pause_resume: 0,
                button_text: ""Start""
            }
        },
        methods: {
            begin: function () {
                if (this.timer !== ""00:00:00"" && this.pause_resume === 0) {
                    console.log(""Begin!"");
                    this.start = 1;
                    this.button_text = ""Pause"";
                    this.pause_resume = 1;
                    let s = this.timer.split("":"");
                    this.sec = Number(s[2]);
                    this.min = Number(s[1]);
                    this.hr = Number(s[0]);
                    this.date = (new Date().getTime() + (this.hr * 60 * 60 * 1000) + (this.min * 60 * 1000) + (this.sec * 1000)) / 1000;
                    this.now = new Date().getTime() / 1000;
                    this.interval = window.setInterval(() => {
                        this.now = Math.trunc((new Date()).getTime() / 1000);
                    }, 1000);
                } else if (this.timer !== ""00:00:00"" && this.pa");
            WriteLiteral(@"use_resume === 1) {
                    this.pause();
                }
                else if (this.timer !== ""00:00:00"" && this.pause_resume === 2) {
                    this.pause_resume = 1;
                    this.resume();
                }
            },
            reset: function () {
                this.start = 0;
                clearInterval(this.interval);
                this.interval = 0;
                this.min = 0;
                this.hr = 0;
                this.sec = 0;
                this.timer = ""00:00:00"";
                this.date = 0;
                this.now = 0;
                this.button_text = ""Start"";
                this.now = new Date().getTime() / 1000;
                this.pause_resume = 0;
                localStorage.removeItem('timer');
                localStorage.removeItem('bool');
                localStorage.removeItem('timestamp');
                localStorage.removeItem('paused');
            },
            pause: function () {
     ");
            WriteLiteral(@"           this.pause_resume = 2;
                this.button_text = ""Resume"";
                clearInterval(this.interval);
                this.paused_time = Math.floor(Math.floor(this.date) - Math.floor(this.now));
            },
            resume: function () {
                let curr = new Date().getTime() / 1000;
                this.date = this.paused_time + curr;
                this.now = (new Date().getTime() / 1000);
                this.interval = window.setInterval(() => {
                    this.now = Math.trunc((new Date()).getTime() / 1000);
                }, 1000);
                localStorage.removeItem('timer');
                localStorage.removeItem('bool');
                localStorage.removeItem('timestamp');
                localStorage.removeItem('paused');
                this.pause_resume = 1;
                this.button_text = ""Pause"";
            },
            t: function () {
                if (this.timer !== ""00:00:00"") {
                    let pause ");
            WriteLiteral(@"= this.paused_resume;
                    localStorage.setItem('timestamp', new Date().getTime() / 1000);
                    localStorage.setItem('timer', this.hours + "":"" + this.minutes + "":"" + this.seconds);
                    localStorage.setItem('bool', this.start);
                    localStorage.setItem('paused', this.pause_resume); //paused gets SET ----
                    return ""Success?"";
                }
                else {
                    return 1;
                }
            }
        },
        computed: {
            seconds() {
                if (this.start && this.timer !== ""00:00:00"" && this.date - this.now > 0) {
                    if ((Math.trunc((this.date - this.now) % 60)) === 0 && this.minutes === 0 && this.hours === 0) {
                        localStorage.removeItem('timer');
                        localStorage.removeItem('bool');
                        localStorage.removeItem('timestamp');
                        localStorage.removeItem('paused'");
            WriteLiteral(@");
                    }
                    if ((Math.trunc((this.date - this.now) % 60)) < 10 || (Math.trunc((this.date - this.now) % 60) === 0)) {
                        this.sec = ""0"" + (Math.trunc((this.date - this.now) % 60)).toString();
                        return ""0"" + (Math.trunc((this.date - this.now) % 60)).toString();
                    }
                    this.sec = Math.trunc((this.date - this.now) % 60);
                    return Math.trunc((this.date - this.now) % 60);
                }
                return ""00"";
            },
            minutes() {
                if (this.start && this.timer !== ""00:00:00"" && this.date - this.now > 0) {
                    if ((Math.trunc((this.date - this.now) / 60) % 60) < 10 || (Math.trunc((this.date - this.now) / 60) % 60) === 0) {
                        this.min = ""0"" + (Math.trunc((this.date - this.now) / 60) % 60).toString();
                        return ""0"" + (Math.trunc((this.date - this.now) / 60) % 60).toString();
  ");
            WriteLiteral(@"                  }
                    this.min = Math.trunc((this.date - this.now) / 60) % 60;
                    return Math.trunc((this.date - this.now) / 60) % 60;
                }
                return ""00"";
            },
            hours() {
                if (this.start && this.timer !== ""00:00:00"" && this.date - this.now > 0) {
                    if ((Math.trunc((this.date - this.now) / 60 / 60) % 24) < 10 || (Math.trunc((this.date - this.now) / 60 / 60) % 24) === 0) {
                        this.sec = ""0"" + (Math.trunc((this.date - this.now) / 60 / 60) % 24).toString();
                        return ""0"" + (Math.trunc((this.date - this.now) / 60 / 60) % 24).toString();
                    }
                    this.sec = Math.trunc((this.date - this.now) / 60 / 60) % 24;
                    return Math.trunc((this.date - this.now) / 60 / 60) % 24;
                }
                return ""00"";
            },
            current() {
                this._current_ = Date.now(");
            WriteLiteral(@") / 1000;
                return Date.now() / 1000;
            },
        },
        ready: function () {
            window.addEventListener('beforeunload', this.t);
            let myData = localStorage['timer'];
            let bool = localStorage['bool'];
            let timestamp = localStorage['timestamp'];
            let paused = localStorage['paused'];
            let diff = 0;
            if (myData == null || myData == ""00:00:00"") {
                this.timer = ""00:00:00"";
                this.button_text = ""Start"";
            } else {
                this.start = bool;
                let s = myData.split("":"");
                this.sec = Number(s[2]);
                this.min = Number(s[1]);
                this.hr = Number(s[0]);
                this.timer = myData;
                this.date = (new Date().getTime() + (this.hr * 60 * 60 * 1000) + (this.min * 60 * 1000) + (this.sec * 1000)) / 1000;
                if (paused == 2) {
                    this.pause_resume = 1");
            WriteLiteral(@";
                    this.button_text = ""Resume"";
                } else if (paused == 1) {
                    this.pause_resume = 1
                    this.button_text = ""Pause"";
                    diff = (new Date().getTime() / 1000) - timestamp;
                    this.date -= diff;
                    this.interval = window.setInterval(() => {
                        this.now = Math.trunc((new Date()).getTime() / 1000);
                    }, 1000);
                }

            }
            if (this.timer === ""00:00:00"") {
                localStorage.removeItem('timer');
                localStorage.removeItem('bool');
                localStorage.removeItem('timestamp');
                localStorage.removeItem('paused');
            }
        }
    });
    Vue.component('Stopwatch', {
        template: '<div> \
         <h3>Stopwatch</h3>\
        <div class=""timer block"">     \
        <p class=""digit"">{{ hours }}</p>\
        <p class=""text"">Hours</p>\
        <p cla");
            WriteLiteral(@"ss=""digit"">{{ minutes }}</p>\
        <p class=""text"">Minutes</p>\
        <p class=""digit"">{{ seconds }}</p>\
        <p class=""digit"">{{ milliseconds }}</p>\
        <p class=""text"">Seconds</p>\
    </div>\
    <div class=""form"">\
        <button type=""button"" v-on:click=""begin"">{{button_text}}</button>\
        <button type=""button"" v-on:click=""add_lap"">Lap</button>\
        <button type=""button"" v-on:click=""reset"">Reset</button>\
    </div>\
    <div>\
        <table>\
            <tr>\
                <th>{{ lap_text }}</th>\
                <th>{{ time_text }}</th>\
            </tr>\
            <tr v-for=""lap in laps"">\
                <td>\
                    {{ lap.lap }}\
                </td>\
                <td>\
                    {{ lap.time }}\
                </td>\
            </tr>\
        </table>\
</div>',
        data() {
            return {
                timer: ""00:00:00"",
                min: 0,
                sec: 0,
                hr: 0,
    ");
            WriteLiteral(@"            ms:0,
                now: new Date().getTime() / 1000,
                start: 0,
                reset_bool: 0,
                paused_time: 0,
                interval: 0,
                date: 0,
                diff: 0,
                pause_resume: 0,
                button_text: ""Start"",
                laps: [],
                lap_num: 1,
                lap_text: """",
                time_text:""""
            }
        },
        methods: {
            add_lap: function () {
                if (this.pause_resume == 1) {
                    this.laps.unshift({ lap: this.lap_num++, time: this.hours + "":"" + this.minutes + "":"" + this.seconds + this.milliseconds });
                    this.lap_text = ""Lap "";
                    this.time_text = "" Time (HH:MM:SS)"";
                }
            },
            begin: function () {
                console.log(this.pause_resume);
                if (this.timer == ""00:00:00"" && this.pause_resume == 0) {
                   ");
            WriteLiteral(@" this.start = 1;
                    let s = this.timer.split("":"");
                    this.sec = Number(s[2]);
                    this.min = Number(s[1]);
                    this.hr = Number(s[0]);
                    this.date = (new Date().getTime() + this.min * 60 * 1000 + this.sec * 1000) / 1000;
                    this.interval = window.setInterval(() => {
                        this.now = (Date.now() / 1000);
                    }, 1);
                    this.pause_resume = 1;
                    this.button_text = ""Pause"";
                } else if (this.pause_resume == 1) {
                    clearInterval(this.interval);
                    this.min = this.minutes;
                    this.sec = this.seconds;
                    this.ms = this.milliseconds;
                    this.paused_time = this.date - this.now;
                    this.pause_resume = 2;
                    this.button_text = ""Resume"";

                } else if (this.pause_resume == 2) {
           ");
            WriteLiteral(@"         console.log(""Paused_time: "" + this.paused_time);
                        let curr = new Date().getTime() / 1000;
                        this.date = curr + this.paused_time;
                        this.now = (new Date().getTime() / 1000);
                        this.interval = window.setInterval(() => {
                            this.now = (Date.now() / 1000);
                        }, 1);
                        this.start = 1;
                        this.pause_resume = 1;
                        this.button_text = ""Pause"";
                }
            },
            reset: function () {
                this.start = 0;
                this.timer = ""00:00:00"";
                this.date = 0;
                this.now = 0;
                this.pause_resume = 0;
                clearInterval(this.interval);
                this.interval = 0;
                this.button_text = ""Start"";
                this.laps = [];
                this.lap_num = 1;
                this.lap_");
            WriteLiteral(@"text = """";
                this.time_text = """";
                localStorage.removeItem('stopwatch');
                localStorage.removeItem('stopwatch_bool');
                localStorage.removeItem('stopwatch_timestamp');
                localStorage.removeItem('stopwatch_time');
                localStorage.removeItem('stopwatch_paused');
                localStorage.removeItem('laps');
            },
            pause: function () {
                if (this.pause_resume == 1) {
                    clearInterval(this.interval);
                    this.min = this.minutes;
                    this.sec = this.seconds;
                    this.ms = this.milliseconds;
                    this.paused_time = this.date - this.now;
                    this.pause_resume = 2;
                    this.button_text = ""Resume"";
                }
            },
            resume: function () {
                if (this.pause_resume == 2) {
                    let curr = new Date().getTime() / 1000;");
            WriteLiteral(@"
                    this.date = this.paused_time + curr;
                    this.interval = window.setInterval(() => {
                        this.now = (Date.now() / 1000);
                    }, 1);
                    this.start = 1;
                    this.pause_resume = 1;
                    this.button_text = ""Pause"";
                }
            },
            t: function () {
                let stopwatch = this.hours + this.minutes + this.seconds + this.milliseconds;
                if (stopwatch > 0) {
                    localStorage.setItem('stopwatch_timestamp', new Date().getTime() / 1000);
                    localStorage.setItem('stopwatch', this.hours + "":"" + this.minutes + "":"" + this.seconds + this.milliseconds);
                    localStorage.setItem('stopwatch_bool', this.start);
                    localStorage.setItem('stopwatch_time', stopwatch);
                    localStorage.setItem('stopwatch_paused', this.pause_resume);
                    localStorage.se");
            WriteLiteral(@"tItem('laps', JSON.stringify(this.laps));
                    return ""Success?"";
                }
                return 0;
            }
        },
        ready: function () {
            window.addEventListener('beforeunload', this.t);
            let myData = localStorage['stopwatch'];
            let bool = localStorage['stopwatch_bool'];
            let timestamp = localStorage['stopwatch_timestamp'];
            let stopwatch_time = localStorage['stopwatch_time'];
            let paused = localStorage['stopwatch_paused'];
            let laps = localStorage['laps'];
            let diff = 0;
            if (stopwatch_time > 0) {
                this.laps = JSON.parse(laps);
                this.lap_num = JSON.parse(laps).length + 1;
                if (laps !== null) {
                    this.lap_text = ""Lap "";
                    this.time_text = "" Time (HH:MM:SS)"";
                };
                this.start = bool;
                let s = myData.split("":"");
              ");
            WriteLiteral(@"  this.sec = Number(s[2]);
                this.min = Number(s[1]);
                this.hr = Number(s[0]);
                this.timer = myData;
                this.date = (new Date().getTime() - (this.hr * 60 * 60 * 1000) - (this.min * 60 * 1000) - (this.sec * 1000)) / 1000;
                diff = (new Date().getTime() / 1000) - timestamp;

                if (paused == 1) {
                    this.date -= diff;
                    this.interval = window.setInterval(() => {
                        this.now = (Date.now() / 1000);
                    }, 1);
                    this.pause_resume = 1;
                    this.button_text = ""Pause"";
                } else if (paused == 2) {
                    this.button_text = ""Resume"";
                    this.pause_resume = 1;
                }
            }
            return 0;
        },
        computed: {
            seconds() {
                if (this.start) {
                    if (Math.trunc((this.now - this.date) % 60) < 1");
            WriteLiteral(@"0) {
                        return ""0"" + (Math.trunc((this.now - this.date) % 60)).toString();
                    }
                    return Math.trunc((this.now - this.date) % 60);
                };
                return ""0"";
            },
            minutes() {
                if (this.start) {
                    if (Math.trunc((this.now - this.date) / 60) % 60 < 10) {
                        return ""0"" + (Math.trunc((this.now - this.date) / 60) % 60).toString();
                    }
                    return Math.trunc((this.now - this.date) / 60) % 60;
                };
                return ""00"";
            },
            milliseconds() {
                if (this.start) {
                    return (((this.now - this.date) % 100) % 1).toFixed(2).replace(/^0+/, '');
                }
                return ""0"";
            },
            hours() {
                if (this.start) {
                    if (Math.trunc((this.now - this.date) / 60 / 60) % 24 < 10 || Math.t");
            WriteLiteral(@"runc((this.now - this.date) / 60 / 60) % 24 === 0) {
                        return ""0"" + (Math.trunc((this.now - this.date) / 60 / 60) % 24).toString();
                    }
                    return Math.trunc((this.now - this.date) / 60 / 60) % 24;
                }
                return ""00"";
            }
        }
    });

	new Vue({
        el: '#app',
        data: {
            show_component: true
        }
	})

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
