#pragma checksum "C:\Users\epere\OneDrive\Gymlog\Gymlog\Views\Home\Timer.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "26e0bd755fa7a7418088a754791a6003702491a2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Timer), @"mvc.1.0.view", @"/Views/Home/Timer.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Timer.cshtml", typeof(AspNetCore.Views_Home_Timer))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\epere\OneDrive\Gymlog\Gymlog\Views\_ViewImports.cshtml"
using Gymlog;

#line default
#line hidden
#line 2 "C:\Users\epere\OneDrive\Gymlog\Gymlog\Views\_ViewImports.cshtml"
using Gymlog.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"26e0bd755fa7a7418088a754791a6003702491a2", @"/Views/Home/Timer.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"221afc43e64317c4f1fa0904c7b9307c191dcbcb", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Timer : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(121, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(130, 970, true);
            WriteLiteral(@"<style>

    .text {
        font-size: 25px;
        font-family: 'Roboto Condensed', serif;
        margin-top: 10px;
        margin-bottom: 10px;
        text-align: center;
    }

    .digit {
        font-size: 130px;
        font-weight: 100;
        font-family: 'Roboto', serif;
        /*margin: 10px;*/
        text-align: center;
    }

    .block > p {
        display: inline;
        text-align: center;
    }

    .block {
        margin-left: 31%;
    }

    .form {
        margin-left: 31%;
    }

    .stopwatch {
        margin-left: 11%;
    }

    h3 {
        text-align: center;
    }
</style>

<script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.21/vue.js""></script>
<div id=""app"">
    <button type=""button"" v-on:click=""show_component = !show_component"">Timer/Stopwatch</button>

    <Countdown v-if=""show_component""></Countdown>

    <Stopwatch v-if=""!show_component""></Stopwatch>

    <a");
            EndContext();
            BeginWriteAttribute("href", " href=", 1100, "", 1122, 1);
#line 54 "C:\Users\epere\OneDrive\Gymlog\Gymlog\Views\Home\Timer.cshtml"
WriteAttributeValue("", 1106, ViewBag.AuthUri, 1106, 16, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(1122, 11705, true);
            WriteLiteral(@" class=""btn btn-primary"">Spotify Log In</a>

</div>



<script>

    Vue.component('Countdown', {
        template: '<div> \
       <h3>Timer</h3>\
    <div class=""timer block"">     \
        <p class=""digit"">{{ hours }}</p>\
        <p class=""text"">Hours</p>\
        <p class=""digit"">{{ minutes }}</p>\
        <p class=""text"">Minutes</p>\
        <p class=""digit"">{{ seconds }}</p>\
        <p class=""text"">Seconds</p>\
    </div>\
    <div class=""form"">\
    <input type=""text"" name=""timer"" v-model=""timer"" placeholder=""00:30:00"" />\
    <button type=""button"" v-on:click=""begin"">{{button_text}}</button>\
    <button type=""button"" v-on:click=""reset"">Reset</button>\
    <button type=""button"" v-on:click=""pause"">Pause</button>\
    <button type=""button"" v-on:click=""resume"">Resume</button>\
        </div>\
</div>',
        data() {
            return {
                timer: ""00:00:00"",
                min: 0,
                sec: 0,
                hr: 0,
                now: new Dat");
            WriteLiteral(@"e().getTime() / 1000,
                start: 0,
                reset_bool: 0,
                paused_time: 0,
                interval: 0,
                date: 0,
                diff: 0,
                _current_: 0,
                pause_resume: 0,
                button_text: ""Start""
            }
        },
        methods: {
            begin: function () {
                if (this.timer !== ""00:00:00"" && this.pause_resume === 0) {
                    this.start = 1;
                    this.button_text = ""Pause"";
                    this.pause_resume = 1;
                    let s = this.timer.split("":"");
                    this.sec = Number(s[2]);
                    this.min = Number(s[1]);
                    this.hr = Number(s[0]);
                    this.date = (new Date().getTime() + (this.hr * 60 * 60 * 1000) + (this.min * 60 * 1000) + (this.sec * 1000)) / 1000;
                    this.now = new Date().getTime() / 1000;
                    this.interval = window.setIn");
            WriteLiteral(@"terval(() => {
                        this.now = Math.trunc((new Date()).getTime() / 1000);
                    }, 1000);
                } else if (this.pause_resume === 1) {
                    this.pause();
                }
                else {
                    this.pause_resume = 1;
                    this.resume();
                }
            },
            reset: function () {
                this.start = 0;
                this.timer = ""00:00:00"";
                this.date = 0;
                this.now = 0;
            },
            pause: function () {
                this.pause_resume = 2;
                this.button_text = ""Resume"";
                clearInterval(this.interval);
                this.paused_time = Math.floor(Math.floor(this.date) - Math.floor(this.now));

            },
            resume: function () {
                let curr = new Date().getTime() / 1000;
                this.date = this.paused_time + curr;   //-------check
                this");
            WriteLiteral(@".now = (new Date().getTime() / 1000); /// --------check
                this.interval = window.setInterval(() => {
                    this.now = Math.trunc((new Date()).getTime() / 1000);  //----check
                }, 1000);
                localStorage.removeItem('timer');
                localStorage.removeItem('bool');
                localStorage.removeItem('timestamp');
                this.pause_resume = 1;
            },
            t: function () {
                localStorage.setItem('timestamp', new Date().getTime() / 1000);
                localStorage.setItem('timer', this.hr + "":"" + this.min + "":"" + this.sec);
                localStorage.setItem('bool', 1);
                return ""Success?"";
            }
        },
        computed: {
            seconds() {
                if (this.start && this.timer !== ""00:00:00"" && this.date - this.now > 0) {
                    if ((Math.trunc((this.date - this.now) % 60)) < 10 || (Math.trunc((this.date - this.now) % 60) === 0)) {
 ");
            WriteLiteral(@"                       this.sec = ""0"" + (Math.trunc((this.date - this.now) % 60)).toString();
                        return ""0"" + (Math.trunc((this.date - this.now) % 60)).toString();
                    }
                    this.sec = Math.trunc((this.date - this.now) % 60);
                    return Math.trunc((this.date - this.now) % 60);
                }
                this.button_text = ""Start"";
                return ""00"";
            },
            minutes() {
                if (this.start && this.timer !== ""00:00:00"" && this.date - this.now > 0) {
                    if ((Math.trunc((this.date - this.now) / 60) % 60) < 10 || (Math.trunc((this.date - this.now) / 60) % 60) === 0) {
                        this.min = ""0"" + (Math.trunc((this.date - this.now) / 60) % 60).toString();
                        return ""0"" + (Math.trunc((this.date - this.now) / 60) % 60).toString();
                    }
                    this.min = Math.trunc((this.date - this.now) / 60) % 60;
          ");
            WriteLiteral(@"          return Math.trunc((this.date - this.now) / 60) % 60;
                }
                this.button_text = ""Start"";
                return ""00"";
            },
            hours() {
                if (this.start && this.timer !== ""00:00:00"" && this.date - this.now > 0) {
                    if ((Math.trunc((this.date - this.now) / 60 / 60) % 24) < 10 || (Math.trunc((this.date - this.now) / 60 / 60) % 24) === 0) {
                        this.sec = ""0"" + (Math.trunc((this.date - this.now) / 60 / 60) % 24).toString();
                        return ""0"" + (Math.trunc((this.date - this.now) / 60 / 60) % 24).toString();
                    }
                    this.sec = Math.trunc((this.date - this.now) / 60 / 60) % 24;
                    return Math.trunc((this.date - this.now) / 60 / 60) % 24;
                }
                this.button_text = ""Start"";
                return ""00"";
            },
            current() {
                this._current_ = Date.now() / 1000;
        ");
            WriteLiteral(@"        return Date.now() / 1000;
            },
        },
        ready: function () {
            window.addEventListener('beforeunload', this.t);
            let myData = localStorage['timer'];
            let bool = localStorage['bool'];
            let timestamp = localStorage['timestamp'];
            let diff = 0;
            if (myData == null || bool === 0) {
                console.log(""myData is null"");
                this.timer = ""00:00:00"";
                this.button_text = ""Start"";
            } else {
                this.start = bool;
                let s = myData.split("":"");
                this.sec = Number(s[2]);
                this.min = Number(s[1]);
                this.hr = Number(s[0]);
                this.timer = myData;
                this.date = (new Date().getTime() + (this.hr * 60 * 60 * 1000) + (this.min * 60 * 1000) + (this.sec * 1000)) / 1000;
                diff = (new Date().getTime() / 1000) - timestamp;
                this.begin();
          ");
            WriteLiteral(@"      
            }
            if (this.timer === ""00:00:00"") {
                localStorage.removeItem('timer');
                localStorage.removeItem('bool');
                localStorage.removeItem('timestamp');
            }
        }
    });
    Vue.component('Stopwatch', {
        template: '<div> \
         <h3>Stopwatch</h3>\
        <div class=""stopwatch block"">     \
        <p class=""digit"">{{ hours }}</p>\
        <p class=""text"">Hours</p>\
        <p class=""digit"">{{ minutes }}</p>\
        <p class=""text"">Minutes</p>\
        <p class=""digit"">{{ seconds }}</p>\
        <p class=""digit"">{{ milliseconds }}</p>\
        <p class=""text"">Seconds</p>\
    </div>\
    <button type=""button"" v-on:click=""begin"">Start</button>\
    <button type=""button"" v-on:click=""reset"">Reset</button>\
    <button type=""button"" v-on:click=""pause"">Pause</button>\
    <button type=""button"" v-on:click=""resume"">Resume</button>\
</div>',
        data() {
            return {
                tim");
            WriteLiteral(@"er: ""00:00:00"",
                min: 0,
                sec: 0,
                hr:0,
                now: new Date().getTime() / 1000,
                start: 0,
                reset_bool: 0,
                paused_time: 0,
                interval: 0,
                date: 0,
                diff: 0
            }
        },
        methods: {
            begin: function () {
                if (this.timer === ""00:00:00"") {
                    this.start = 1;
                    let s = this.timer.split("":"");
                    this.sec = Number(s[2]);
                    this.min = Number(s[1]);
                    this.hr = Number(s[0]);
                    this.date = (new Date().getTime() + this.min * 60 * 1000 + this.sec * 1000) / 1000;
                    this.interval = window.setInterval(() => {
                        this.now = (Date.now() / 1000);
                    }, 1);
                }
            },
            reset: function () {
                this.start = 0");
            WriteLiteral(@";
                this.timer = ""00:00:00"";
                this.date = 0;
                this.now = 0;
            },
            pause: function () {
                window.clearInterval(this.interval);
                this.min = this.minutes;
                this.sec = this.seconds;
                this.ms = this.milliseconds;
                this.paused_time = this.date - this.now;
            },
            resume: function () {
                let curr = new Date().getTime() / 1000;
                this.date = this.paused_time + curr;
                this.interval = window.setInterval(() => {
                    this.now = (Date.now() / 1000);
                }, 1);
                this.start = 1;
            }
        },
        computed: {
            seconds() {
                if (this.start) {
                    if (Math.trunc((this.now - this.date) % 60) < 10 || Math.trunc((this.now - this.date) % 60) === 0) {
                        return ""0"" + (Math.trunc((this.now - t");
            WriteLiteral(@"his.date) % 60)).toString();
                    }
                    return Math.trunc((this.now - this.date) % 60);
                };
                return ""0"";
            },
            minutes() {
                if (this.start) {
                    if (Math.trunc((this.now - this.date) / 60) % 60 < 10 || Math.trunc((this.now - this.date) / 60) % 60 === 0) {
                        return ""0"" + (Math.trunc((this.now - this.date) / 60) % 60).toString();
                    }
                    return Math.trunc((this.now - this.date) / 60) % 60;
                };
                return ""00"";
            },
            milliseconds() {
                if (this.start) {
                    return (((this.now - this.date) % 100) % 1).toFixed(2).replace(/^0+/, '');
                }
                return ""0"";
            },
            hours() {
                if (this.start) {
                    if (Math.trunc((this.now - this.date) / 60 / 60) % 24 < 10 || Math.trunc((this.now");
            WriteLiteral(@" - this.date) / 60 / 60) % 24 === 0) {
                        return ""0"" + (Math.trunc((this.now - this.date) / 60 / 60) % 24).toString();
                    }
                    return Math.trunc((this.now - this.date) / 60 / 60) % 24;
                }
                return ""00"";
            }
        }
    });

	new Vue({
        el: '#app',
        data: {
            show_component: true
        }
	})

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
