// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Gymlog.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181203063908_adding logworkout")]
    partial class addinglogworkout
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gymlog.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Gymlog.Models.Exercise", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExerciseMuscle")
                        .IsRequired();

                    b.Property<string>("ExerciseName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new { Id = "1", ExerciseMuscle = "CHEST", ExerciseName = "FLAT BARBELL BENCH PRESS" },
                        new { Id = "2", ExerciseMuscle = "CHEST", ExerciseName = "FLAT DUMBBELL BENCH PRESS" },
                        new { Id = "3", ExerciseMuscle = "CHEST", ExerciseName = "INCLINE BARBELL BENCH PRESS" },
                        new { Id = "4", ExerciseMuscle = "CHEST", ExerciseName = "INCLINE DUMBBELL BENCH PRESS" },
                        new { Id = "5", ExerciseMuscle = "CHEST", ExerciseName = "DECLINE BARBELL BENCH PRESS" },
                        new { Id = "6", ExerciseMuscle = "CHEST", ExerciseName = "DECLINE DUMBBELL BENCH PRESS" },
                        new { Id = "7", ExerciseMuscle = "CHEST", ExerciseName = "CHEST DIPS" },
                        new { Id = "8", ExerciseMuscle = "CHEST", ExerciseName = "PUSH-UPS" },
                        new { Id = "9", ExerciseMuscle = "CHEST", ExerciseName = "FLAT DUMBBELL FLYES" },
                        new { Id = "10", ExerciseMuscle = "CHEST", ExerciseName = "INCLINE DUMBBELL FLYES" },
                        new { Id = "11", ExerciseMuscle = "CHEST", ExerciseName = "DECLINE DUMBBELL FLYES" },
                        new { Id = "12", ExerciseMuscle = "CHEST", ExerciseName = "CABLE CROSSOVERS" },
                        new { Id = "13", ExerciseMuscle = "BACK", ExerciseName = "PULL-UPS" },
                        new { Id = "14", ExerciseMuscle = "BACK", ExerciseName = "CHIN-UPS" },
                        new { Id = "15", ExerciseMuscle = "BACK", ExerciseName = "LAT PULL-DOWNS" },
                        new { Id = "16", ExerciseMuscle = "BACK", ExerciseName = "BENT OVER BARBELL ROWS" },
                        new { Id = "17", ExerciseMuscle = "BACK", ExerciseName = "BENT OVER DUMBBELL ROWS" },
                        new { Id = "18", ExerciseMuscle = "BACK", ExerciseName = "T-BAR ROWS" },
                        new { Id = "19", ExerciseMuscle = "BACK", ExerciseName = "SEATED CABLE ROWS" },
                        new { Id = "20", ExerciseMuscle = "BACK", ExerciseName = "BARBELL SHRUGS" },
                        new { Id = "21", ExerciseMuscle = "BACK", ExerciseName = "DUMBBELL SHRUGS" },
                        new { Id = "22", ExerciseMuscle = "SHOULDER", ExerciseName = "SEATED OVERHEAD BARBELL PRESS" },
                        new { Id = "23", ExerciseMuscle = "SHOULDER", ExerciseName = "SEATED OVERHEAD DUMBBELL PRESS" },
                        new { Id = "24", ExerciseMuscle = "SHOULDER", ExerciseName = "STANDING OVERHEAD BARBELL PRESS" },
                        new { Id = "25", ExerciseMuscle = "SHOULDER", ExerciseName = "STANDING OVERHEAD DUMBBELL PRESS" },
                        new { Id = "26", ExerciseMuscle = "SHOULDER", ExerciseName = "ARNOLD PRESS" },
                        new { Id = "27", ExerciseMuscle = "SHOULDER", ExerciseName = "DUMBBELL LATERAL RAISES" },
                        new { Id = "28", ExerciseMuscle = "SHOULDER", ExerciseName = "DUMBBELL FRONT RAISES" },
                        new { Id = "29", ExerciseMuscle = "LEGS", ExerciseName = "SQUAT" },
                        new { Id = "30", ExerciseMuscle = "LEGS", ExerciseName = "FRONT SQUATS" },
                        new { Id = "31", ExerciseMuscle = "LEGS", ExerciseName = "BARBELL LUNGES" },
                        new { Id = "32", ExerciseMuscle = "LEGS", ExerciseName = "DUMBBELL LUNGES" },
                        new { Id = "33", ExerciseMuscle = "LEGS", ExerciseName = "LEG PRESS" },
                        new { Id = "34", ExerciseMuscle = "LEGS", ExerciseName = "DEADLIFT" },
                        new { Id = "35", ExerciseMuscle = "LEGS", ExerciseName = "STRAIGHT LEG DEADLIFTS" },
                        new { Id = "36", ExerciseMuscle = "LEGS", ExerciseName = "SUMO DEADLIFTS" },
                        new { Id = "37", ExerciseMuscle = "LEGS", ExerciseName = "HYPEREXTENSIONS" },
                        new { Id = "38", ExerciseMuscle = "LEGS", ExerciseName = "GOOD-MORNINGS" },
                        new { Id = "39", ExerciseMuscle = "LEGS", ExerciseName = "LEG CURLS" },
                        new { Id = "40", ExerciseMuscle = "TRICEPS", ExerciseName = "TRICEP DIPS" },
                        new { Id = "41", ExerciseMuscle = "TRICEPS", ExerciseName = "FLAT CLOSE GRIP BENCH PRESS" },
                        new { Id = "42", ExerciseMuscle = "TRICEPS", ExerciseName = "SKULL CRUSHERS" },
                        new { Id = "43", ExerciseMuscle = "BICEPS", ExerciseName = "DUMBBELL CURLS" },
                        new { Id = "44", ExerciseMuscle = "BICEPS", ExerciseName = "PREACHER CURLS" },
                        new { Id = "45", ExerciseMuscle = "BICEPS", ExerciseName = "HAMMER CURLS" }
                    );
                });

            modelBuilder.Entity("Gymlog.Models.LoggedWorkout", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("NotesString");

                    b.Property<string>("RepsCompletedString");

                    b.Property<string>("UserId");

                    b.Property<string>("WeightString");

                    b.Property<string>("WorkoutId");

                    b.HasKey("Id");

                    b.ToTable("LoggedWorkouts");
                });

            modelBuilder.Entity("Gymlog.Models.Set", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int>("Reps");

                    b.Property<int>("SetNumber");

                    b.Property<string>("WorkoutExerciseId");

                    b.HasKey("Id");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Gymlog.Models.Workout", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Gymlog.Models.WorkoutExercise", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExerciseName");

                    b.Property<int>("ExerciseNumber");

                    b.Property<string>("WorkoutId");

                    b.HasKey("Id");

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Gymlog.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Gymlog.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gymlog.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Gymlog.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
